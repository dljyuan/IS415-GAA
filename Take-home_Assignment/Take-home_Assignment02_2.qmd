---
title: "Take-home Assignment 02: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan **PART-2**"
author: "Jin Yuan"
date: 02/12/2024
date-modified: "last-modified"
date-format: "DD/MM/YYYY"
editor: visual
format: html
categories:
  - Take-home Assignment
title-block-categories: false
execute: 
  eval: true
  echo: true
  warning: false
---

# Background

Dengue Hemorrhagic Fever (in short dengue fever) is one of the most widespread mosquito-borne diseases in the most tropical and subtropical regions. It is an acute disease caused by dengue virus infection which is transmitted by female Aedes aegypti and Aedes albopictus mosquitoes. In 2015, Taiwan had recorded the most severe dengue fever outbreak with more than 43,000 dengue cases and 228 deaths. Since then, the annual reported dengue fever cases were maintained at the level of not more than 200 cases. However, in 2023, Taiwan recorded 26703 dengue fever cases.

# Objective

Explore and Uncovers:

-   If the distribution of dengue fever outbreak at Tainan City, Taiwan are independent from space and space and time.
-   If the outbreak is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.

# Data Acquisition

For the purpose of this take-home exercise, two data sets are used, they are:

```{r echo=FALSE}
# Your data
data <- data.frame(
  Dataset  = c("TAIWAN_VILLAGE_2020", "Dengue_Daily(csv)"),
  Description = c("Geospatial data of village boundary of Taiwan","Aspatial data of reported dengue cases in Taiwan since 1998"),
  Source = c(" [Historical map data of the village boundary: TWD97 longitude and latitude](https://data.gov.tw/en/datasets/130549)", "[Dengue Daily Confirmed Cases Since 1998](https://data.cdc.gov.tw/en/dataset/dengue-daily-determined-cases-1998)"))

# Display the table
knitr::kable(data)
```

# Install Packages & Importing Data

## Install Necessary Packages

For this assignment, we will be using the following packages:

```{r echo=FALSE}
# Your data
data <- data.frame(
  Package  = c("[sf](https://cran.r-project.org/web/packages/sf/): Import geospatial data", "[spdep](https://sfdep.josiahparry.com/): Perform global & local spatial autocorrelation and emerging hotspot analysis.", "[tmap](https://cran.r-project.org/web/packages/tmap/): To visualise the analysis output", "[tidyverse](https://www.tidyverse.org/): For comprehensive data science tasks, including importing, wrangling, and visualizing spatial data"))

# Display the table
knitr::kable(data)
```

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, plotly)
```

## Importing & Wrangling Data

```{r}
tainan <- st_read(dsn = "../data/geospatial", 
                 layer = "TAINAN_VILLAGE")
dengue <- read_csv("../data/aspatial/Dengue_Daily.csv")

dengue <- dengue %>%
  filter(居住縣市 == "台南市")
tainan <- tainan[tainan$TOWNID %in% c("D01", "D02", "D04", "D06", "D07", "D08", "D32", "D39"), ]
tainan$COUNTYNAME <- ifelse(tainan$COUNTYNAME == "臺南市", "台南市", as.character(tainan$COUNTYNAME))
dengue <- dengue %>%
  rename('COUNTYNAME' = 居住縣市,
         'TOWNNAME' = 居住鄉鎮,
         'VILLNAME' = 居住村里,
         'x-coordinate' = 最小統計區中心點X,
         'y-coordinate' = 最小統計區中心點Y)
dengue$WEEK <- as.numeric(format(dengue$發病日, "%V"))
dengue$YEAR <- as.numeric(format(dengue$發病日, "%Y"))
dengue <- dengue[dengue$WEEK >= 31 & dengue$WEEK <= 50 & dengue$YEAR == 2023, ]

tainan <- st_transform(tainan, crs = 3414)
```

```{r}
# Create spacetime object
dengue$combined_location <- paste(dengue$TOWNNAME, dengue$VILLNAME, sep = "-")
tainan$combined_location <- paste(tainan$TOWNNAME, tainan$VILLNAME, sep = "-")
```

```{r}
dengue <- dengue %>%
  group_by(WEEK,combined_location) %>%
  summarise(CASES = sum(確定病例數))
dengue_sf <- left_join(tainan,dengue, by="combined_location") %>%
  select(11:13)
```

```{r}
# Print count for location
print(length(unique(dengue_sf$combined_location)))
dengue_sf <- st_drop_geometry(dengue_sf)
print(dengue_sf[rowSums(is.na(dengue_sf)) > 0, ])
```

```{r echo=FALSE}
# Get unique locations
unique_locations <- unique(dengue_sf$combined_location)

# Define the number of iterations and starting value
num_iterations <- 20
starting_value <- 31

# Loop through the iterations
for (i in starting_value:(starting_value + num_iterations - 1)) {
  # Define the time period with missing data
  missing_time <- i
  
  # Identify missing locations for the specified time period
  existing_locations <- dengue_sf$combined_location[dengue_sf$WEEK == missing_time]
  missing_locations <- setdiff(unique_locations, existing_locations)
  
  # Create new rows for missing locations with zero values for extra columns
  new_rows <- data.frame(combined_location = missing_locations, WEEK = missing_time, CASES = 0)
  
  # Append new rows to the space-time cube
  dengue_sf <- rbind(dengue_sf, new_rows)
}
```

```{r}
dengue_sf <- na.omit(dengue_sf)
```

## Creating a Time Series Cube

```{r}
dengue_sf <- as_tibble(dengue_sf)
CASES_st <- spacetime(dengue_sf, tainan,
                      .loc_col = "combined_location",
                      .time_col = "WEEK")
```

```{r}
is_spacetime_cube(CASES_st)
```

# Computing Gi\*

## Deriving the spatial weights

```{r}
CASES_nb <- CASES_st %>%
  activate("geometry") %>%
  mutate(nb = include_self(st_contiguity(geometry)),
         wt = st_inverse_distance(nb, geometry,
                                  scale = 1,
                                  alpha = 1),
         .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
```

```{r}
gi_stars <- CASES_nb %>% 
  group_by(WEEK) %>% 
  mutate(gi_star = local_gstar_perm(
    CASES, nb, wt)) %>% 
  tidyr::unnest(gi_star)
```

## Man-Kendall Test

With these Gi\* measures we can then evaluate the hotspot locations(Villages) highlighted in the PART 1 of the assignment for a trend using the Mann-Kendall test.

::: {.panel-tabset .nav-pills}
## 東區-崇信里

```{r}
cbg <- gi_stars %>% 
  ungroup() %>% 
  filter(combined_location == "東區-崇信里") |> 
  select(combined_location, WEEK, gi_star)
```

```{r}
p <- ggplot(data = cbg, 
       aes(x = WEEK, 
           y = gi_star)) +
  geom_line() +
  theme_light()

ggplotly(p)
```

```{r}
cbg %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```

## 東區-自強里

```{r}
cbg <- gi_stars %>% 
  ungroup() %>% 
  filter(combined_location == "東區-自強里") |> 
  select(combined_location, WEEK, gi_star)
```

```{r}
p <- ggplot(data = cbg, 
       aes(x = WEEK, 
           y = gi_star)) +
  geom_line() +
  theme_light()

ggplotly(p)
```

```{r}
cbg %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```

## 安南區-海佃里

```{r}
cbg <- gi_stars %>% 
  ungroup() %>% 
  filter(combined_location == "安南區-海佃里") |> 
  select(combined_location, WEEK, gi_star)
```

```{r}
p <- ggplot(data = cbg, 
       aes(x = WEEK, 
           y = gi_star)) +
  geom_line() +
  theme_light()

ggplotly(p)
```

```{r}
cbg %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```

## 安南區-溪墘里

```{r}
cbg <- gi_stars %>% 
  ungroup() %>% 
  filter(combined_location == "安南區-溪墘里") |> 
  select(combined_location, WEEK, gi_star)
```

```{r}
p <- ggplot(data = cbg, 
       aes(x = WEEK, 
           y = gi_star)) +
  geom_line() +
  theme_light()

ggplotly(p)
```

```{r}
cbg %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```

## 永康區-三合里

```{r}
cbg <- gi_stars %>% 
  ungroup() %>% 
  filter(combined_location == "永康區-三合里") |> 
  select(combined_location, WEEK, gi_star)
```

```{r}
p <- ggplot(data = cbg, 
       aes(x = WEEK, 
           y = gi_star)) +
  geom_line() +
  theme_light()

ggplotly(p)
```

```{r}
cbg %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```
:::

# Performing Emerging Hotspot Analysis

```{r}
ehsa <- emerging_hotspot_analysis(
  x = CASES_st, 
  .var = "CASES", 
  k = 1, 
  nsim = 99
)
```

```{r}
ggplot(data = ehsa,
       aes(x = classification)) +
  geom_bar() +
  theme(axis.text.x = element_text(size = 5))
```

# Visualising EHSA

```{r}
tainan_ehsa <- tainan %>%
  left_join(ehsa,
            by = join_by(combined_location == location))
```

```{r}
ehsa_sig <- tainan_ehsa  %>%
  filter(p_value < 0.05)
tmap_mode("plot")
tm_shape(tainan_ehsa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
  tm_fill("classification") + 
  tm_borders(alpha = 0.4)
```
