---
title: "In-class Exercise 05: Global Measures of Spatial Autocorrelation"
author: "Jin Yuan"
date: 02/05/2024
date-modified: "last-modified"
date-format: "DD/MM/YYYY"
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
categories:
  - In-class Exercise
title-block-categories: True
---

# Getting Started

## Installing & Loading the R packages

Four R packages will be used for this in-class exercise, they are: sf, sfdep, tmap, tidyverse.

::: callout-note
# Do it Yourself!

Using the steps you learned in previous lesson, install and load **sf**, **tmap**, **sfdep** and **tidyverse** packages into R environment.
:::

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse)
```

# The Data

For the purpose of this in-class exercise, the Hunan data sets will be used. There are 2 data sets in this use case, they are:

-   Huan, a geospatial data set in ESRI shapefile format, and
-   Hunan_2012, an atribute data set in csv format.

## Importing geospatial data

```{r}
hunan <- st_read(dsn = "../data/geospatial", 
                 layer = "Hunan")
```

## Importing attribute table

```{r}
hunan2012 <- read_csv("../data/aspatial/Hunan_2012.csv")
```

::: callout-note
# Important

In order to retain the geospatial properties, the left data frame must be the sf data.frame (i.e hunan)
:::

```{r}
hunan_GDPPC <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

## Plotting a choropleth map

```{r}
tmap_mode('plot')
tm_shape(hunan_GDPPC) +
  tm_fill("GDPPC",
          style = "quantile",
          palette = "Blues",
          title = "GDPPC") +
  tm_layout(main.title = "Distribution of GDP per capita by county Hunan Province",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

# Global Measures of Spatial Association

## Deriving contiguity weights: Queen's method

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
# Insert before column number 1 [.before = 1]
```

## Computing Global Moran'I

In the code chunk below, global_moran() function is used to compute the Moran'I value. Different from spdep package, the output is a tibble data.frame.

```{r}
moranI <- global_moran(wm_q$GDPPC,
                       wm_q$nb,
                       wm_q$wt)
glimpse(moranI)
```

## Performing Global Moran'I permuation test

In practice, monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by global_moran_perm().

It is always a good practice to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.

```{r}
set.seed(1234)
```

Next global_moran_perm() is used to perform Monte's Carlo simulation.

```{r}
global_moran_perm(wm_q$GDPPC,
                       wm_q$nb,
                       wm_q$wt,
                  nsim = 99)
```

The statistical report above show that the p-value is smaller than alpha value of 0.05. Hence, we have enough statistical evidence to reject the null hypothesis that the spatial distribution of GDP per capital are resemble random distribution (i.e. independent from spatial). Because the Moran's I statistics is greater than 0. We can infer that the spatial distribution shows sign of clustering.

::: callout-note
If the computer is slow, can set simulation to 99 instead of 999. 99 should be able to compute "good enough result".

The numbers of simulation is always equal to nsim + 1. This mean in nsim = 99, This mean 100 simulation will be performed.
:::
