---
title: "In-class Exercise 07: Geographically Weighted Predictive Models"
author: "Jin Yuan"
date: 03/15/2024
date-modified: "last-modified"
date-format: "DD/MM/YYYY"
editor: visual
format: html
categories:
  - Hands-on Exercise
title-block-categories: false
execute: 
  eval: true
  echo: true
  warning: false
---
# Overview

Predictive modelling uses statistical learning or machine learning techniques to predict outcomes. By and large, the event one wants to predict is in the future. However, a set of known outcome and predictors (also known as variables) will be used to calibrate the predictive models.

Geospatial predictive modelling is conceptually rooted in the principle that the occurrences of events being modeled are limited in distribution. When geographically referenced data are used, occurrences of events are neither uniform nor random in distribution over space. There are geospatial factors (infrastructure, sociocultural, topographic, etc.) that constrain and influence where the locations of events occur. Geospatial predictive modeling attempts to describe those constraints and influences by spatially correlating occurrences of historical geospatial locations with environmental factors that represent those constraints and influences.

## Learning outcome

In this in-class exercise, you will learn how to build predictive model by using geographical random forest method. By the end of this hands-on exercise, you will acquire the skills of:

-   preparing training and test data sets by using appropriate data sampling methods,
-   calibrating predictive models by using both geospatial statistical learning and machine learning methods,
-   comparing and selecting the best model for predicting the future outcome,
-   predicting the future outcomes by using the best model calibrated.

# The Data

-   Aspatial dataset:
    -   HDB Resale data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from Data.gov.sg.
-   Geospatial dataset:
    -   MP14_SUBZONE_WEB_PL: a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg
-   Locational factors with geographic coordinates:
    -   Downloaded from Data.gov.sg.
        -   Eldercare data is a list of eldercare in Singapore. It is in shapefile format.
        -   Hawker Centre data is a list of hawker centres in Singapore. It is in geojson format.
        -   Parks data is a list of parks in Singapore. It is in geojson format.
        -   Supermarket data is a list of supermarkets in Singapore. It is in geojson format.
        -   clinics data is a list of CHAS clinics in Singapore. It is in geojson format.
        -   Childcare service data is a list of childcare services in Singapore. It is in geojson format.
        -   Kindergartens data is a list of kindergartens in Singapore. It is in geojson format.
    -   Downloaded from Datamall.lta.gov.sg.
        -   MRT data is a list of MRT/LRT stations in Singapore with the station names and codes. It is in shapefile format.
        -   Bus stops data is a list of bus stops in Singapore. It is in shapefile format.
-   Locational factors without geographic coordinates:
    -   Downloaded from Data.gov.sg.
        -   Primary school data is extracted from the list on General information of schools from data.gov portal. It is in csv format.
    -   Retrieved/Scraped from other sources
        -   CBD coordinates obtained from Google.
        -   Shopping malls data is a list of Shopping malls in Singapore obtained from [Wikipedia](https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore).
        -   Good primary schools is a list of primary schools that are ordered in ranking in terms of popularity and this can be found at [Local Salary Forum](https://www.salary.sg/2021/best-primary-schools-2021-by-popularity).

# Installing and Loading R packages

This code chunk performs 3 tasks:

-   A list called packages will be created and will consists of all the R packages required to accomplish this exercise.
-   Check if R packages on package have been installed in R and if not, they will be installed.
-   After all the R packages have been installed, they will be loaded.

```{r}
pacman::p_load(performance ,ggstatsplot, rpart.plot, rpart, gtsummary, tidyverse, tidymodels, SpatialML, GWmodel, sf, spdep, tmap)
```

# Preparing Data

## Reading data file to rds

Reading the input data sets. It is in simple feature data frame.

```{r}
rs_sf <- read_rds("../data/rds/HDB_resale.rds")
```

## Data Sampling

The entire data are split into training and test data sets with 65% and 35% respectively by using initial_split() of rsample package. rsample is one of the package of tigymodels.

```{r eval=FALSE}
set.seed(1234)
resale_split <- initial_split(rs_sf, 
                              prop = 5/10,)
train_sf <- training(resale_split)
test_sf <- testing(resale_split)
```

```{r eval=FALSE}
train_sf <- write_rds(train_sf, "../data/rds/models_2/train_sf.rds")
test_sf <- write_rds(test_sf, "../data/rds/models_2/test_sf.rds")
```

# Retriving the Stored Data

```{r}
train_sf <- read_rds("../data/rds/models_2/train_sf.rds")
test_sf <- read_rds("../data/rds/models_2/test_sf.rds")
```

```{r}
train_df <- train_sf %>%
  st_drop_geometry() %>%
  as.data.frame()

test_df <- test_sf %>%
  st_drop_geometry() %>%
  as.data.frame()
```

# Computing Correlation Matrix

Before loading the predictors into a predictive model, it is always a good practice to use correlation matrix to examine if there is sign of multicolinearity.

```{r fig.width=12, fig.height=12}
rs_sf1 <- rs_sf %>%
  st_drop_geometry()
ggcorrmat(rs_sf1[,2:17])
```

# Building a non-spatial multiple linear regression

```{r}
rs_mlr <- lm(RESALE_PRICE ~ FLOOR_AREA_SQM +
                  STOREY_ORDER + REMAINING_LEASE_MTHS +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + PROX_CHAS + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_df)
summary(rs_mlr)
```

# Revising mlr model

```{r}
train_df <- train_df %>%
  select(-c(PROX_CHAS))
train_sf <- train_sf %>%
  select(-c(PROX_CHAS))
test_df <- test_df %>%
  select(-c(PROX_CHAS))
test_sf <- test_sf %>%
  select(-c(PROX_CHAS))
```

```{r}
rs_mlr <- lm(RESALE_PRICE ~ FLOOR_AREA_SQM +
                  STOREY_ORDER + REMAINING_LEASE_MTHS +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_df)
```

The code chunk below extract the x,y coordinates of the full, training and test data sets.

```{r}
coords <- st_coordinates(rs_sf)
coords_train <- st_coordinates(train_sf)
coords_test <- st_coordinates(test_sf)
```


```{r}
set.seed(1234)
rs_rp <- rpart(formula = RESALE_PRICE ~ FLOOR_AREA_SQM +
                  STOREY_ORDER + REMAINING_LEASE_MTHS +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_df)
rs_rp
```

```{r}
rpart.plot(rs_rp)
```

# Calibrating Random Forest Model

In this section, you will learn how to calibrate a model to predict HDB resale price by using random forest function of ranger package.

```{r}
set.seed(1234)
rs_rf <- ranger(formula = RESALE_PRICE ~ FLOOR_AREA_SQM +
                  STOREY_ORDER + REMAINING_LEASE_MTHS +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_df,
             importance = "impurity")
rs_rf
```

```{r}
vi <- as.data.frame(rs_rf$variable.importance)
vi$variables <- rownames(vi)
vi <- vi %>%
  rename(vi = "rs_rf$variable.importance")
```

```{r}
ggplot(data = vi,
       aes(x = vi,
           y = reorder(variables, vi))) +
  geom_bar(stat = "identity")
```

```{r eval=FALSE}
set.seed(1234)
rs_grf <- grf(formula = RESALE_PRICE ~ FLOOR_AREA_SQM +
                  STOREY_ORDER + REMAINING_LEASE_MTHS + PROX_CBD + PROX_ELDERLYCARE +
                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                       WITHIN_1KM_PRISCH,
                     dframe=train_df, 
                     kernel="adaptive",
                     coords=coords_train,
                     bw.min = 25,
                     bw.max = 60,
                     step = 1,
                     nthreads = 8,
                     forest = FALSE,
                     weighted = TRUE)
```

```{r echo=FALSE}
rs_grf <- read_rds("../data/rds/models_2/rs_grf.rds")
```

```{r}
test_df <- cbind(test_sf, coords_test) %>%
  st_drop_geometry()
```

### Predicting with test data

Next, predict.grf() of spatialML package will be used to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.

```{r eval=FALSE}
grf_pred <- predict.grf(rs_grf,
                        test_df,
                        x.var.name="X",
                        y.var.name = "Y",
                        local.w=1,
                        global.w =0)
```

### Converting the predicting output into a data frame

The output of the predict.grf() is a vector of predicted values. It is wiser to convert it into a data frame for further visualisation and analysis.

```{r}
grf_pred <- read_rds("../data/rds/models_2/grf_pred.rds")
grf_pred_df <- as.data.frame(grf_pred)
```

In the code chunk below, `cbind()` is used to append the predicted values onto test_df

```{r}
test_pred <- test_df %>%
  select(RESALE_PRICE) %>%
  cbind(grf_pred_df)
```

### Saving predicted output of random forest and preparing final data table

```{r}
rf_pred <- predict(rs_rf, test_df)
```

```{r}
rf_pred_df <- as.data.frame(rf_pred$predictions) %>%
  rename(rf_pred = "rf_pred$predictions")
```

```{r}
test_pred <- cbind(test_pred,
                   rf_pred_df)
```

### Saving predicted output of multiple linear regression and preparing final data table

```{r}
mlr_pred <- predict(rs_mlr, test_df)
```

```{r}
mlr_pred_df <- as.data.frame(mlr_pred) %>%
  rename(mlr_pred = "mlr_pred")
```

```{r}
test_pred <- cbind(test_pred, mlr_pred_df)
```

```{r}
yardstick::rmse(test_pred,
                RESALE_PRICE,
                rf_pred)
```


```{r}
yardstick::rmse(test_pred,
                RESALE_PRICE,
                mlr_pred)
```

```{r}
mc <- test_pred %>%
  pivot_longer(cols=c(2:4),
               names_to = "models",
               values_to = "predicted")
```

Alternatively, scatterplot can be used to visualise the actual resale price and the predicted resale price by using the code chunk below.

```{r}
ggplot(data = test_pred,
       aes(x = grf_pred,
           y = RESALE_PRICE)) +
  geom_point()
```


```{r}
ggplot(data = test_pred,
       aes(x = mlr_pred,
           y = RESALE_PRICE)) +
  geom_point()
```
