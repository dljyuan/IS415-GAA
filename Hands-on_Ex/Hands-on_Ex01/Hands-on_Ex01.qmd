---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
execute: 
  warning: false
date: "`r Sys.Date()`"
---

# Getting Started

## Installing and loading R packages

In this section, I will install and load tidyverse and sf packages.

```{r}
pacman::p_load(tidyverse, sf)
```

# Importing a geospatial data in shapefile format

```{r}
mpsz <- st_read(dsn = "/dljyuan/IS415-GAA/data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")

```

## **Plotting the Geospatial Data**

Hide Plot Show Code Only

```{r}
#| eval: false
plot(mpsz)
```

Hide Code Show Plot Only

```{r}
#| echo: false
plot(mpsz)
```

Others
```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

# Importing another geospatial data in shapefile format

```{r}
cyclingpath = st_read(dsn = "/dljyuan/IS415-GAA/data/geospatial", 
                         layer = "CyclingPathGazette")
```

# Importing GIS data in kml format

```{r}
preschool = st_read("/dljyuan/IS415-GAA/data/geospatial/PreSchoolsLocation.kml")
```

# Checking the Content of A Simple Feature Data Frame

The column in the sf data.frame that contains the geometries is a list, of class sfc.

```{r}
st_geometry(mpsz)
mpsz$geom
mpsz[[1]]
```

Beside the basic feature information, we also would like to learn more about the associated attribute information in the data frame.

```{r}
glimpse(mpsz)
```

Sometimes we would like to reveal complete information of a feature object

```{r}
head(mpsz, n=5)  
```

# Assigning EPSG code to a simple feature data frame
One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

**Wrong EPSG Code**

```{r}
st_crs(mpsz) 
```

**Assigning correct EPSG Code**

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

# Transforming the projection from wgs84 to svy21.
```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

# Importing the aspatial data
```{r}
listings <- read_csv("/dljyuan/IS415-GAA/data/aspatial/listings.csv")
list(listings) 
```

# Creating a simple feature data frame from an aspatial data frame
```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Examine the content of this newly created simple feature data frame
```{r}
glimpse(listings_sf)
```

# Geoprocessing with sf package
**Buffering**

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.
```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```

**Point-in-polygon count**

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.
```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
top_n(mpsz3414, 1, `PreSch Count`)
mpsz3414$Area <- mpsz3414 %>%
  st_area()
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

# Exploratory Data Analysis (EDA)

Histogram
```{r}
hist(mpsz3414$`PreSch Density`)
```

ggplot2 Histogram
```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

ggplot2 Scattered Plot
```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```