---
title: "Network Constrained Spatial Point Patterns Analysis"
execute: 
  eval: true
  echo: true
  warning: false
author: "Jin Yuan"
date: 01/22/2024
date-modified: "last-modified"
date-format: "DD/MM/YYYY"
editor: visual
---

# Install Packages

```{r}
pacman::p_load(sf, sp, spNetwork, tmap, classInt, viridis, tidyverse)
```

# Read Data Files

```{r}
network <- st_read(dsn="../data/geospatial",
                   layer="Punggol_St")
childcare <- st_read(dsn="../data/geospatial",
                     layer="Punggol_CC")
```
# Data Preparation
We can examine the structure of the output SpatialDataFrame in RStudio. Alternative, code chunk below can be used to print the content of network ***SpatialLineDataFrame*** and childcare ***SpatialPointsDataFrame** by using the code chunk below.
```{r eval=FALSE}
str(network)
str(childcare)
```

**When I exploring spNetwork’s functions, it came to my attention that spNetwork is expecting the geospatial data contains complete CRS information.**

In the code chunk below, spTransform() of sp package is used to assign EPSG code to the SpatialDataFrames. The epsg:3414 is the code for svy21.
```{r eval=FALSE}
childcare <-spTransform(childcare,
                        CRS("+init=epsg:3414"))
network <- spTransform(network,
                       CRS("+init=epsg:3414"))
```

# Visualising Geospatial Data
```{r}
plot(network)
plot(childcare,add=T,col='red',pch = 19)
```

```{r}
tmap_mode('plot')
tm_shape(childcare) + 
  tm_dots() + 
  tm_shape(network) +
  tm_lines()
```
# Network Constrained KDE (NetKDE) Analysi
## Line Segmenting (Preparing the lixels objects)
```{r}
lixels <- lixelize_lines(network,
                         750,
                         mindist = 375)
```

## Generating Line Centre Point
```{r}
samples <- lines_center(lixels)
```

## Performing NetKDE
```{r}
densities <- nkde(network, 
                  events = childcare,
                  w = rep(1,nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, #we aggregate events within a 5m radius (faster calculation)
                  sparse = TRUE,
                  verbose = FALSE)
```

::: callout-note
# Learning Points
- kernel_name argument indicates that quartic kernel is used. Are possible kernel methods supported by spNetwork are: triangle, gaussian, scaled gaussian, tricube, cosine ,triweight, epanechnikov or uniform.
- method argument indicates that simple method is used to calculate the NKDE. Currently, spNetwork support three popular methods, they are:

  - **method=“simple”**. This first method was presented by Xie et al. (2008) and proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an areal unit.
  - **method=“discontinuous”**. The method is proposed by Okabe et al (2008), which equally “divides” the mass density of an event at intersections of lixels.
  - **method=“continuous”**. If the discontinuous method is unbiased, it leads to a discontinuous kernel function which is a bit counter-intuitive. Okabe et al (2008) proposed another version of the kernel, that divide the mass of the density at intersection but adjusts the density before the intersection to make the function continuous.

:::

## Visualising NetKDE
**insert the computed density values into samples and lixels objects as density field**
```{r}
samples$density <- densities
lixels$density <- densities
```

Since **svy21 projection system is in meter**, the computed density values are very small i.e. 0.0000005. The code chunk below is used to resale the density values from number of events per meter to number of events per kilometer.
```{r}
# rescaling to help the mapping
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

**Interactive and high cartographic quality NetKDE map visualisation**
```{r}
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(childcare)+
  tm_dots()
tmap_mode('plot')
```

# Network Constrained G- and K-Function Analysis
In this section, we are going to perform complete spatial randomness (CSR) test by using kfunctions() of **spNetwork** package. The null hypothesis is defined as:

**Ho: The observed spatial point events (i.e distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.**

The CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.

If this hypothesis is rejected, we may infer that the distribution of childcare centres are spatially interacting and dependent on each other; as a result, they may form nonrandom patterns.
```{r}
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

::: callout-note
# Learning Points
There are ten arguments used in the code chunk above they are:

- **lines**: A SpatialLinesDataFrame with the sampling points. The geometries must be a SpatialLinesDataFrame (may crash if some geometries are invalid).
- **points**: A SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network.
- **start**: A double, the start value for evaluating the k and g functions.
- **end**: A double, the last value for evaluating the k and g functions.
- **step**: A double, the jump between two evaluations of the k and g function.
- **width**: The width of each donut for the g-function.
- **nsim**: An integer indicating the number of Monte Carlo simulations required. In the above example, 50 simulation was performed. Note: most of the time, more simulations are required for inference
- **resolution**: When simulating random points on the network, selecting a resolution will reduce greatly the calculation time. When resolution is null the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points are selected vertices on the new network.
- **conf_int**: A double indicating the width confidence interval (default = 0.05).

:::

The output of kfunctions() is a list with the following values:

  plotkA, a ggplot2 object representing the values of the k-function
  plotgA, a ggplot2 object representing the values of the g-function
  valuesA, a DataFrame with the values used to build the plots
```{r}
kfun_childcare$plotk
```

The blue line is the empirical network K-function of the childcare centres in Punggol planning area. The gray envelop represents the results of the 50 simulations in the interval 2.5% - 97.5%. Because the blue line between the distance of 250m-400m are below the gray area, we can infer that the childcare centres in Punggol planning area resemble regular pattern at the distance of 250m-400m.