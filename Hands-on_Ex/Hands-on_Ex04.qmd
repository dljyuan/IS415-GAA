---
title: "2nd Order Spatial Point Patterns Analysis Methods"
execute: 
  eval: true
  echo: true
  warning: false
author: "Jin Yuan"
date: 01/18/2024
date-format: "DD/MM/YYYY"
editor: visual
---

# Getting Started

## Install necessary packages

```{r}
#| code-fold: true
#| code-summary: "Show Code"
pacman::p_load(sf,spatstat, raster, maptools, tmap)
```

## Importing Data

```{r}
# Childcare Data
childcare_sf <- st_read("../data/geospatial/CHILDCARE.geojson") %>%
  st_transform(crs = 3414)
# National Boundary Coastal Outline
sg_sf <- st_read(dsn = "../data/geospatial/", layer="CostalOutline")
# MasterPlan Subzone
mpsz_sf <- st_read(dsn = "../data/geospatial/", 
                layer = "MP14_SUBZONE_WEB_PL")
```

### Checking & Transforming Data

```{r}
st_geometry(childcare_sf)
st_geometry(sg_sf)
st_geometry(mpsz_sf)
```

```{r}
st_crs(childcare_sf)
st_crs(sg_sf)
st_crs(mpsz_sf)
```

```{r}
sg_sf <- st_transform(sg_sf, 3414)
mpsz_sf <- st_transform(mpsz_sf, 3414)
```

## Mapping Spatial Data

```{r}
tmap_mode('plot')
tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare_sf) +
  tm_dots()
```

```{r eval=FALSE}
tmap_mode('view')
tmap_options(check.and.fix = TRUE)
tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare_sf) +
  tm_dots()
tmap_mode('plot')
```

## Geospatial Data Wrangling

### Converting sf Dataframe to sp's Spatial Class

```{r}
childcare <- as_Spatial(childcare_sf)
sg <- as_Spatial(sg_sf)
mpsz <- as_Spatial(mpsz_sf)
```

```{r}
summary(childcare)
summary(sg)
summary(mpsz)
```

```{r}
childcare
sg
mpsz
```

### Converting sp's Spatial Class to Generic sp Format

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

### Converting Generic sp Format to Spatstatâ€™s ppp Format

```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
plot(childcare_ppp)
summary(childcare_ppp)
```

### Handling Duplicates

```{r}
any(duplicated(childcare_ppp))
sum(multiplicity(childcare_ppp) > 1)
#To Look at the Duplicate
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
any(duplicated(childcare_ppp_jit))
```

### Create owin Object

```{r}
sg_owin <- as(sg_sp, "owin")
plot(sg_owin)
summary(sg_owin)
```

### Combine Point Events and Owin Object

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
summary(childcareSG_ppp)
plot(childcareSG_ppp)
```

### Extract Study Area

```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```

```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

# Second-Order Spatial Point Patterns Analysis

## G-Function

**Compute G-function using Gest() \[CCK\]**

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

::: callout-note
**To confirm the observed spatial patterns above, a hypothesis test will be conducted.** The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

**Monte Carlo test with G-fucntion**
:::

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

**G-function \[Tampines\]**

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
plot(G_tm.csr)
```

## F-Function

**Compute F-function using Fest() \[CCK\]** ::: callout-note The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001. :::

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
plot(F_CK.csr)
```

**F-function \[Tampines\]**

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
plot(F_tm.csr)
```

## K-Function

**Compute K-function using Kest() \[CCK\]**

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

**K-function \[Tampines\]**

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r,
     ylab= "K(d)-r", xlab = "d(m)",
     xlim=c(0,1000))
K_tm.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_tm.csr, . - r ~ r,
     xlab="d", ylab="K(d)-r",
     xlim=c(0,500))
```

## L-Function

**Compute L-function using Lest() \[CCK\]**

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

**L-function \[Tampines\]**

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)",
     xlim=c(0,1000))
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_tm.csr, . - r ~ r, xlab="d", ylab="L(d)-r",
     xlim=c(0,500))
```
