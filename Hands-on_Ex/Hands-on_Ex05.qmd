---
title: "Hands-on Exercise 05: Spatial Weights and Applications"
author: "Jin Yuan"
date: 01/25/2024
date-modified: "last-modified"
date-format: "DD/MM/YYYY"
editor: visual
categories:
  - Hands-on Exercise
title-block-categories: True
---

# Overview

In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:

import geospatial data using appropriate function(s) of **sf** package, import csv file using appropriate function of **readr** package, perform relational join using appropriate join function of **dplyr** package, compute spatial weights using appropriate functions of **spdep** package, and calculate spatially lagged variables using appropriate functions of **spdep** package.

# Getting Started
## Installing and Loading Packages
```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## Data Acquisition
The following datasets are used:
```{r echo=FALSE}
# Your data
data <- data.frame(
  Dataset  = c("Hunan (Hunan.shp)", "Hunan 2012 (Hunan-2012.csv)"),
  Source = c("Prof Kam", "Prof Kam"))

# Display the table
knitr::kable(data)
```

# Data Wrangling
## Importing Data
```{r}
hunan <- st_read(dsn = "../data/geospatial", 
                 layer = "Hunan")

hunan2012 <- read_csv("../data/aspatial/Hunan_2012.csv")
```

## Combining Dataframe
```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

## Visualising Data (Choropleth)
```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.2)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

```{r}
tm_shape(hunan) +
  tm_fill("GDPPC",
          style = "quantile",
          palette = "Greens",
          title = "GDPPC") +
  tm_layout(main.title = "Distribution of GDP per capita by district",
            main.title.position = "center",
            main.title.size = 1.1,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

# Identify Area Neighbours
## Contiguity neighbours methods
**Computing (QUEEN) contiguity based neighbours**
```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

::: callout-note
# Summary
The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.
:::

**Search for neighbours in polygon**
```{r}
#Neighbours in first polygon
wm_q[[1]]
```

**Retrieve county name**
```{r}
hunan$County[1]
```

**Reveal name of neighbours**
```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

**Retrieve the GDPPC of all the neighbours**
```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

**Display complete weight matrix**
```{r}
str(wm_q)
```

**Computing (ROOK) contiguity based neighbours**
```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

**Visualising contiguity weights**
```{r}
#Get longitude
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
#Get latitude
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
#Bind the cooridinates
coords <- cbind(longitude, latitude)
```
```{r}
head(coords)
```

### Plotting Queen contiguity based neighbours map
```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### Plotting Rook contiguity based neighbours map
```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Plotting both Queen and Rook contiguity based neighbours maps
```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Distance neighbours methods
::: callout-note
# Learning Points
In this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoi
:::

**Determine the cut-off distance**
Firstly, we need to determine the upper limit for distance band by using the steps below:

Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.
Convert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().
Return the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.
Remove the list structure of the returned object by using unlist().
```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### Computing fixed distance weight matrix
```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```
```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine table() and card() of spdep.
```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

**Plotting fixed distance weight matrix**
```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```
::: callout-note
The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.
:::

**1st nearest neighbour vs distance link**
```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### Computing adaptive distance weight matrix
One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.
```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

**Plotting distance based neighbours**
```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# Weights based on IDW
::: callout-note
# Learning Points
In this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.

First, we will compute the distances between areas by using nbdists() of spdep.
:::
```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## Row-standardised weights matrix
```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

To see the weight of the first polygon’s eight neighbors type:
```{r}
rswm_q$weights[10]
```

::: callout-note
Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.
:::

Using the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.
```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
summary(unlist(rswm_ids$weights))
```

# Application of Spatial Weight Matrix
::: callout-note
# Learning Points
In this section, you will learn how to create four different spatial lagged variables, they are:

- spatial lag with row-standardized weights,
- spatial lag as a sum of neighbouring values,
- spatial window average, and
- spatial window sum.
:::

**Spatial lag with row-standardized weights**
```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

**Append the spatially lag GDPPC values onto hunan sf data frame**
```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
head(hunan)
```

**Compare GDPPC & spatial lag GDPPC**
```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

**Spatial lag as a sum of neighboring values**
```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

**Computing lag variable from weight and GDPPC**
```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
lag_sum
```

**Append the lag_sum GDPPC field into hunan sf data frame**
```{r}
hunan <- left_join(hunan, lag.res)
```

**Compare GDPPC and Spatial Lag Sum GDPPC **
```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

**Spatial window average**
```{r}
#To add the diagonal element to the neighbour list
wm_qs <- include.self(wm_q)
wm_qs[[1]]
#Obtain the weights
wm_qs <- nb2listw(wm_qs)
wm_qs
```

**Create the lag variable from our weight structure and GDPPC variable**
```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

**Convert the lag variable listw object into a data.frame**
```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```
::: callout-note
The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.
:::

**Append lag_window_avg GDPPC values onto hunan sf data.frame**
```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

**Compare the values of lag GDPPC and Spatial window average**
```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

**Plot the lag_gdppc and w_ave_gdppc maps**
```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```
::: callout-note
For more effective comparison, it is advicible to use the core tmap mapping functions.
:::

**Spatial window sum**
The spatial window sum is the counter part of the window average, but without using row-standardized weights.
```{r}
wm_qs <- include.self(wm_q)
wm_qs
#Assign binary weights to the neighbour structure that includes the diagonal element
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
#Explicitly assign weight values
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

**Compute the lag variable**
```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

**Convert the lag variable listw object into a data.frame**
```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

**Append w_sum GDPPC values onto hunan sf data.frame**
```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

**Compare the values of lag GDPPC and Spatial window average**
```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

**Plot the lag_sum GDPPC and w_sum_gdppc maps**
```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```