{
  "hash": "78c559f4a9ff04cbf22c82ababfdbf1c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Assignment 01: Discovering geographical distribution of Grab hailing services in Singapore\"\nauthor: \"Jin Yuan\"\ndate: 01/22/2024\ndate-modified: \"last-modified\"\ndate-format: \"DD/MM/YYYY\"\neditor: visual\nformat: html\ncategories:\n  - Take-home Assignment\ntitle-block-categories: false\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# Background\n\nIn this exploration, we investigate the geographical and spatio-temporal distribution of Grab hailing services in Singapore, leveraging the rich dataset provided by GRAB known as Grab Posisi. As a significant shared taxi operator in Southeast Asia, GRAB's dataset offers a unique perspective on human mobility. This study focuses on applying Spatial Point Pattern Analyses (KDE/NKDE) to discern patterns within the dataset.\n\n# Install Packages & Importing Data\n\n## Install Necessary Packages\n\nFor this exercise, we will be using the following packages:\n\n**sf** for importing, managing, and processing geospatial data through simple features.\n\n**tidyverse** for comprehensive data science tasks, including importing, wrangling, and visualizing spatial data.\n\n**spatstat** for point pattern analysis, offering a wide range of functions for exploring spatial patterns.\n\n**spNetwork** for analyzing spatial networks and their properties.\n\n**classInt** for determining class intervals for mapping and visualization purposes.\n\n**viridis** for providing color maps suitable for creating visually appealing visualizations.\n\n**maptools** for manipulating geographic data, offering a set of tools for various spatial operations.\n\n**raster** for reading, writing, manipulating, and analyzing gridded spatial data in a raster format.\n\n**arrow** for reading parquet files and to load the dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, sf, tidyverse, spatstat, spNetwork, classInt, viridis,\n               maptools, raster, arrow)\n```\n:::\n\n\n## Importing Data\n\n**GrabPosisi Data (Pick Up Location)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#GrabPosisi Data\ndf <- arrow::read_parquet(\"/dljyuan/IS415-GAA/data/GrabPosisi/part-00000.parquet\")\ndf2 <- arrow::read_parquet(\"/dljyuan/IS415-GAA/data/GrabPosisi/part-00001.parquet\")\ndf3 <- arrow::read_parquet(\"/dljyuan/IS415-GAA/data/GrabPosisi/part-00002.parquet\")\ndf4 <- arrow::read_parquet(\"/dljyuan/IS415-GAA/data/GrabPosisi/part-00003.parquet\")\ndf5 <- arrow::read_parquet(\"/dljyuan/IS415-GAA/data/GrabPosisi/part-00004.parquet\")\ndf6 <- arrow::read_parquet(\"/dljyuan/IS415-GAA/data/GrabPosisi/part-00005.parquet\")\ndf7 <- arrow::read_parquet(\"/dljyuan/IS415-GAA/data/GrabPosisi/part-00006.parquet\")\ndf8 <- arrow::read_parquet(\"/dljyuan/IS415-GAA/data/GrabPosisi/part-00007.parquet\")\ndf9 <- arrow::read_parquet(\"/dljyuan/IS415-GAA/data/GrabPosisi/part-00008.parquet\")\ndf10 <- arrow::read_parquet(\"/dljyuan/IS415-GAA/data/GrabPosisi/part-00009.parquet\")\n```\n:::\n\n\n**Convert time variable to datetime format**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$pingtimestamp <- as_datetime(df$pingtimestamp)\ndf2$pingtimestamp <- as_datetime(df2$pingtimestamp)\ndf3$pingtimestamp <- as_datetime(df3$pingtimestamp)\ndf4$pingtimestamp <- as_datetime(df4$pingtimestamp)\ndf5$pingtimestamp <- as_datetime(df5$pingtimestamp)\ndf6$pingtimestamp <- as_datetime(df6$pingtimestamp)\ndf7$pingtimestamp <- as_datetime(df7$pingtimestamp)\ndf8$pingtimestamp <- as_datetime(df8$pingtimestamp)\ndf9$pingtimestamp <- as_datetime(df9$pingtimestamp)\ndf10$pingtimestamp <- as_datetime(df10$pingtimestamp)\n```\n:::\n\n\n**Extracting origin location (Pickup Points)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Code repeated for all the other df\norigin_df <- df %>%\n  group_by(trj_id) %>%\n  arrange(pingtimestamp) %>%\n  filter(row_number()==1) %>%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\n**Combine all df together**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_origin_df <- rbind(origin_df, origin_df2,origin_df3,origin_df4,origin_df5,origin_df6,origin_df7,origin_df8,origin_df9,origin_df10)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: callout-note\nFor in class assignment, we are not going to combine the 10 different parquet files but only used one of them for entire analysis\n:::\n\n**Boundary Data (Coastal Outline)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sf <- st_read(dsn = \"../data/geospatial/\",\n                   layer=\"MPSZ-2019\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source `C:\\dljyuan\\IS415-GAA\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nsg_sf <- mpsz_sf %>%  st_combine()\nsg_sf <- st_make_valid(sg_sf)\nlength(which(st_is_valid(sg_sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n**Road Layer Data (Singapore)** The following include data from Singapore, Malaysia & Brunei\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad <- st_read(dsn=\"../data/geospatial\",\n                   layer=\"gis_osm_roads_free_1\")\n```\n:::\n\n\nConvert CRS of Road Data to be the same as the Coastal Outline (SVY21)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad <- st_transform(road, crs = 3414)\nsg_sf <- st_transform(sg_sf, crs = 3414)\nst_geometry(sg_sf)\nst_geometry(road)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_sf <- st_transform(sg_sf, crs = 3414)\nst_geometry(sg_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.537 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n\n```{.r .cell-code}\nmpsz_sf <- st_transform(mpsz_sf, crs = 3414)\nst_geometry(mpsz_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 332 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\nFilter out unnecessary variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#road <- road[, c(\"name\", \"geometry\")]\norigin_df <- origin_df[, c(\"trj_id\", \"rawlat\", \"rawlng\", \"accuracy\", \"weekday\", \"start_hr\", \"day\")]\n```\n:::\n\n\nExtracting road data from Singapore only\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingapore_roads <- st_intersection(road, sg_sf)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n**Import SG Road Layers**\n\n\n::: {.cell}\n\n:::\n\n\n# Data Wrangling\n\n**Convert Data CRS to 3414 SVY21**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingapore_roads <- st_transform(singapore_roads, crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(singapore_roads) +\n  tm_lines()\n```\n:::\n\n\n![](/image/THA-15.png)\n\n**Convert Latitude & Longtitude to Cartisians**\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_df <- st_as_sf(origin_df, \n                       coords = c(\"rawlng\", \"rawlat\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(origin_df) +\n  tm_dots() \n```\n:::\n\n\n![](/image/THA-01.png)\n\n**Convert to Spatial Class**\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin <- as_Spatial(origin_df)\nsg <- as_Spatial(sg_sf)\n#singapore_roads <- as_Spatial(singapore_roads)\n```\n:::\n\n\n**Convert to Spatial Object**\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_sp <- as(origin, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n```\n:::\n\n\n**Convert to ppp Object**\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_ppp <- as(origin_sp, \"ppp\")\n```\n:::\n\n\n**Check for duplicate or overlap points**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(sg_sf) +\n  tm_polygons() +\n  tm_shape(origin) +\n  tm_dots(alpha=0.4, \n          size=0.02)\n```\n:::\n\n\n![](/image/THA-02.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(origin_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(multiplicity(origin_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n**Removing Duplicate Points**\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_ppp <- rjitter(origin_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nany(duplicated(origin_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n**Convert to owin Object**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_owin <- as(sg_sp, \"owin\")\n```\n:::\n\n\n**Combine Grabposisi Data with Coastal Outline**\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_ppp = origin_ppp[sg_owin]\nplot(origin_ppp)\n```\n:::\n\n\n![](/image/THA-16.png)\n\n# Exploratory Data Analysis\n\n## Kernel Density Estimation (KDE)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert data to km as our unit of measurement\norigin_ppp.km <- rescale(origin_ppp, 1000, \"km\")\n```\n:::\n\n\n**Selecting Kernel Method**\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(density(origin_ppp.km, \n  sigma=bw.diggle, \n  edge=TRUE,\n  kernel=\"gaussian\"),\n  main = \"bw.diggle\")\n\nplot(density(origin_ppp.km, \n  sigma=bw.ppl, \n  edge=TRUE,\n  kernel=\"gaussian\"),\n  main = \"bw.ppl\")\n```\n:::\n\n\n![](/image/THA-03.png)\n\nThe map **bw.ppl** might show sharper contrasts and potentially reveal more nuanced clusters or patterns in the point distribution compared to the **bw.diggle** map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(origin_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(origin_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(origin_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(origin_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n```\n:::\n\n\n![](images/THA-04.jpg) While the four KDE maps exhibit overall similarities, closer inspection reveals subtle differences in density patterns. For this analysis we will utilize the **Gaussian kernel** for this analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_origin.ppl <- density(origin_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\n```\n:::\n\n\n**Comparing Fixed & Adaptive KDE**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_origin_adaptive <- adaptive.density(origin_ppp.km, method=\"kernel\")\npar(mfrow=c(1,2))\nplot(kde_origin.ppl, main = \"Fixed bandwidth\")\nplot(kde_origin_adaptive, main = \"Adaptive bandwidth\")\n```\n:::\n\n\n![](images/THA-05.png) Based on visual analysis of the KDE maps, fixed bandwidth will produce a more accurate and interpretable representation of the underlying data distribution as compared to adaptive bandwidth.\n\n**Converting KDE into grid object**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_origin_ppl <- as.SpatialGridDataFrame.im(kde_origin.ppl)\nkde_origin_ppl_raster <- raster(gridded_kde_origin_ppl)\nprojection(kde_origin_ppl_raster) <- CRS(\"+init=EPSG:3414\")\n```\n:::\n\n\n**Visualising Output Map**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kde_origin_ppl_raster) + \n  tm_raster(\"v\", palette = \"YlGnBu\", title=\"\") +\n  tm_layout(\n    legend.position = c(\"right\", \"bottom\"), \n    main.title = \"Pick Up Points Density\",\n    frame = FALSE)\n```\n:::\n\n\n![](images/THA-06.png)\n\nThe map reveals several distinct clusters of high-density points, particularly concentrated in the southeastern and southern quadrants. These clusters could be further analyzed by dividing them into five distinct regions.\n\n## Network Kernel Density Estimation (NKDE)\n\nThe five high-density regions identified in the standard KDE analysis will be the focus of network kernel density estimation. This will leverage the network's inherent connections and potentially uncover deeper insights and relationships within these areas.\n\n![](images/THA-14.png) **Retrieving the five study areas** Changi\n\n\n::: {.cell}\n\n```{.r .cell-code}\nch <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"CHANGI\")\nch <- ch%>%\n  st_union()\nch <- st_make_valid(ch)\nlength(which(st_is_valid(ch) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\nTown\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntown <- mpsz_sf %>%\n  filter(PLN_AREA_N %in% c(\"OUTRAM\",\"DOWNTOWN CORE\",\"SINGAPORE RIVER\",\"MUSEUM\", \"ROCHOR\",\"RIVER VALLEY\", \"STRAITS VIEW\", \"MARINA SOUTH\"))\ntown <- town%>%\n  st_union()\ntown <- st_make_valid(town)\nlength(which(st_is_valid(town) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\nWoodlands\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwood <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"WOODLANDS\")\nwood <- wood%>%\n  st_union()\nwood <- st_make_valid(wood)\nlength(which(st_is_valid(wood) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\nChoa Chu Kang\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncck_bp <- mpsz_sf %>%\n  filter(PLN_AREA_N %in% c(\"CHOA CHU KANG\",\"BUKIT PANJANG\"))\n\ncck_bp <- cck_bp%>%\n  st_union()\n\ncck_bp <- st_make_valid(cck_bp)\nlength(which(st_is_valid(cck_bp) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\nJurong\n\n\n::: {.cell}\n\n```{.r .cell-code}\njg <- mpsz_sf %>%\n  filter(PLN_AREA_N %in% c(\"JURONG WEST\",\"JURONG EAST\",\"CLEMENTI\"))\njg <- jg%>%\n  st_union()\njg <- st_make_valid(jg)\nlength(which(st_is_valid(jg) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n**Converting to SVY21 3414**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nch <- st_transform(ch, crs = 3414)\ntown <- st_transform(town, crs = 3414)\nwood <- st_transform(wood, crs = 3414)\ncck_bp <- st_transform(cck_bp, crs = 3414)\njg <- st_transform(jg, crs = 3414)\n```\n:::\n\n\n**Extracting the road layers for each individual area**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nch_roads <- st_intersection(singapore_roads, ch)\ntown_roads <- st_intersection(singapore_roads, town)\nwood_roads <- st_intersection(singapore_roads, wood)\ncck_bp_roads <- st_intersection(singapore_roads, cck_bp)\njg_roads <- st_intersection(singapore_roads, jg)\n```\n:::\n\n\n**Visualising the extract spatial data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,3))\nplot(ch, main = \"Changi Area\")\nplot(town, main = \"Town Area\")\nplot(wood, main = \"Woodlands Area\")\nplot(cck_bp, main = \"Choa Chu Kang Area\")\nplot(jg, main = \"Jurong Area\")\n```\n:::\n\n\n![](images/THA-07.png)\n\n::: {.panel-tabset .nav-pills}\n## Changi Area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ch_roads[, c(\"osm_id\", \"name\")])\n```\n:::\n\n\n![](images/Changi_Rd.png)\n\n## Town Area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(town_roads[, c(\"osm_id\", \"name\")])\n```\n:::\n\n\n![](images/Town_Rd.png)\n\n## Woodlands Area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(wood_roads[, c(\"osm_id\", \"name\")])\n```\n:::\n\n\n![](images/Woodlands_Rd.png)\n\n## Choa Chu Kang Area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cck_bp_roads[, c(\"osm_id\", \"name\")])\n```\n:::\n\n\n![](images/CCK_Rd.png)\n\n## Jurong Area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(jg_roads[, c(\"osm_id\", \"name\")])\n```\n:::\n\n\n![](images/Jurong_Rd.png)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_arrange(tm_shape(ch_roads) +\n               tm_lines(col = \"red\") +\n               tm_layout(title = \"Changi\", title.size = 0.8),\n             tm_shape(town_roads) +\n               tm_lines(col = \"blue\") +\n               tm_layout(title = \"Town\", title.size = 0.8), \n             tm_shape(wood_roads) +\n               tm_lines(col = \"green\") +\n               tm_layout(title = \"Woodlands\", title.size = 0.8),\n             tm_shape(cck_bp_roads) +\n               tm_lines(col = \"orange\") +\n               tm_layout(title = \"Choa Chu Kang\", title.size = 0.8),\n             tm_shape(jg_roads) +\n               tm_lines(col = \"purple\") +\n               tm_layout(title = \"Jurong\", title.size = 0.8), \n             asp=2, ncol=3)\n```\n:::\n\n\n![](images/THA-08.png)\n\n**Converting the geometry format to linestring.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nch_roads <- st_cast(ch_roads, \"LINESTRING\")\ntown_roads <- st_cast(town_roads, \"LINESTRING\")\nwood_roads <- st_cast(wood_roads, \"LINESTRING\")\ncck_bp_roads <- st_cast(cck_bp_roads, \"LINESTRING\")\njg_roads <- st_cast(jg_roads, \"LINESTRING\")\n```\n:::\n\n\n**Preparing lixels object & generating line centre points**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels_ch <- lixelize_lines(ch_roads, \n                         700, \n                         mindist = 350)\nlixels_town <- lixelize_lines(town_roads, \n                         700, \n                         mindist = 350)\nlixels_wood <- lixelize_lines(wood_roads, \n                         700, \n                         mindist = 350)\nlixels_cck_bp <- lixelize_lines(cck_bp_roads, \n                         700, \n                         mindist = 350)\nlixels_jg <- lixelize_lines(jg_roads, \n                         700, \n                         mindist = 350)\n```\n:::\n\n\n**Retrieving the pickup points for each study area**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples_ch <- lines_center(lixels_ch)\nsamples_town <- lines_center(lixels_town)\nsamples_wood <- lines_center(lixels_wood)\nsamples_cck_bp <- lines_center(lixels_cck_bp)\nsamples_jg <- lines_center(lixels_jg)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_ch = st_intersection(origin_df, ch)\norigin_town = st_intersection(origin_df, town)\norigin_wood = st_intersection(origin_df, wood)\norigin_cck_bp = st_intersection(origin_df, cck_bp)\norigin_jg = st_intersection(origin_df, jg)\n```\n:::\n\n\n**Performing NetKDE**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This code is repeated for the remaining 5 area except the variables for [lines, events, w & samples]\ndensities <- nkde(ch_roads, \n                  events = origin_ch,\n                  w = rep(1,nrow(origin_ch)),\n                  samples = samples_ch,\n                  kernel_name = \"quartic\",\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 5, #we aggregate events within a 5m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n\nsamples_ch$density <- densities*1000\nlixels_ch$density <- densities*1000\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: {.panel-tabset .nav-pills}\n## Changi\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(lixels_ch)+\n  tm_lines(col=\"density\")+\ntm_shape(origin_ch)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Assignment01_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n## Town\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(lixels_town)+\n  tm_lines(col=\"density\")+\ntm_shape(origin_town)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Assignment01_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n## Woodlands\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(lixels_wood)+\n  tm_lines(col=\"density\")+\ntm_shape(origin_wood)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Assignment01_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n## Choa Chu Kang\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(lixels_cck_bp)+\n  tm_lines(col=\"density\")+\ntm_shape(origin_cck_bp)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Assignment01_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n## Jurong\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(lixels_jg)+\n  tm_lines(col=\"density\")+\ntm_shape(origin_jg)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Assignment01_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n:::\n\n::: callout-note\nEnhance clarity by hovering over the map icon and deselecting 'origin\\_\\*' to reveal a more distinct concentration of pick-up points.\n:::\n\n# Conclusion\n\nThe Grab Posisi dataset has provided numerous intriguing findings through the application of Spatial Point Analysis. In the course of the analysis, the findings can be used to assist drivers in identifying optimal areas for passenger pick-ups, ensuring a more efficient use of their working time. Furthermore, the analysis has the potential to reveal insights into the factors contributing to the various traffic hotspots in Singapore.\n",
    "supporting": [
      "Take-home_Assignment01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}